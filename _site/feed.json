{
    "version": "https://jsonfeed.org/version/1",
    "title": "Yo2020",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "A simple blogging website",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/2020/10/20/solid-cheatsheet",
            "title": "SOLID - cheatsheet",
            "summary": null,
            "content_text": "SRP - Single responsability principleResponsable de cambiar un solo cosa.Mal.class NOSRP{    Sring readFile();    void saveUserData();}Bueno.class File{    String read();}class Users{    void save(UserData user);}OCP - Open closed principleExtensible pero no para modificaciones.Mal.double areaTotal(Shape[] shapes){    double total = 0;    foreach(Shape item in shapes){        if(item is Rectangle){            total +=  ...;        } else if (item is Circle) {            total +=  ...;        } else {            total += ...;        }    }    return total;}Bueno.interface Shape{    double getArea();}double areaTotal(Shape[] shapes){    double total = 0;    foreach(Shape item in shapes){        total += item.getArea();    }    return total;}LSP - Liskov substitucion principleBueno.interface Vehicule{    double getSpeed();    double getCubicCapacity();}void main(){    Vehicule car = new Car();    Vehicule bus = new Car();}ISP - Interface segregation principleDependecia entre clases debe ser la mas pequeña posibleMal.interface Animal{    feed();    groom(); //limpiar} class Dog : Animal{    feed();    groom();}class Tiger: Animal{    feed();    groom(); // mala implementación}Bueno.interface Animal{    feed();}class Pet : Animal {    groom();}class Dog : Pet{}class Tiles: Animal{}DIP - Dependency inversion principleMal.void test(){    var book = new PdfBook();    var reader = new PdfReader(PdfBook);}class PdfBook{}class PdfReader{    PdfReader(PdfBook book);}Bueno.void test(){    var book = new pdfBook();    var reader = new EBookReaer(book);}interface EBook{    String read();}class EBookReader{    EBookReader(EBook book);}class PdfBook : EBook{}class MobiBook : EBook{}Resources  https://dotnetfreakblog.wordpress.com/2013/10/07/single-responsibility-principle/  https://www.youtube.com/watch?v=yxf2spbpTSw  https://www.javabrahman.com/programming-principles/liskov-substitution-principal-java-example/  https://code.tutsplus.com/tutorials/solid-part-4-the-dependency-inversion-principle–net-36872",
            "content_html": "<h3 id=\"srp---single-responsability-principle\">SRP - Single responsability principle</h3><p>Responsable de cambiar un solo cosa.</p><p><strong><em>Mal</em></strong>.</p><pre><code class=\"language-java\">class NOSRP{    Sring readFile();    void saveUserData();}</code></pre><p><strong><em>Bueno.</em></strong></p><pre><code class=\"language-java\">class File{    String read();}class Users{    void save(UserData user);}</code></pre><h3 id=\"ocp---open-closed-principle\">OCP - Open closed principle</h3><p>Extensible pero no para modificaciones.</p><p><strong><em>Mal</em></strong>.</p><pre><code class=\"language-c#\">double areaTotal(Shape[] shapes){    double total = 0;    foreach(Shape item in shapes){        if(item is Rectangle){            total +=  ...;        } else if (item is Circle) {            total +=  ...;        } else {            total += ...;        }    }    return total;}</code></pre><p><strong><em>Bueno.</em></strong></p><pre><code class=\"language-c#\">interface Shape{    double getArea();}double areaTotal(Shape[] shapes){    double total = 0;    foreach(Shape item in shapes){        total += item.getArea();    }    return total;}</code></pre><h3 id=\"lsp---liskov-substitucion-principle\">LSP - Liskov substitucion principle</h3><p><strong><em>Bueno.</em></strong></p><pre><code class=\"language-C#\">interface Vehicule{    double getSpeed();    double getCubicCapacity();}void main(){    Vehicule car = new Car();    Vehicule bus = new Car();}</code></pre><h3 id=\"isp---interface-segregation-principle\">ISP - Interface segregation principle</h3><p>Dependecia entre clases debe ser la mas pequeña posible</p><p><strong><em>Mal</em></strong>.</p><pre><code class=\"language-c#\">interface Animal{    feed();    groom(); //limpiar} class Dog : Animal{    feed();    groom();}class Tiger: Animal{    feed();    groom(); // mala implementación}</code></pre><p><strong><em>Bueno.</em></strong></p><pre><code class=\"language-c#\">interface Animal{    feed();}class Pet : Animal {    groom();}class Dog : Pet{}class Tiles: Animal{}</code></pre><h3 id=\"dip---dependency-inversion-principle\">DIP - Dependency inversion principle</h3><p><strong><em>Mal.</em></strong></p><pre><code class=\"language-c#\">void test(){    var book = new PdfBook();    var reader = new PdfReader(PdfBook);}class PdfBook{}class PdfReader{    PdfReader(PdfBook book);}</code></pre><p><strong><em>Bueno.</em></strong></p><pre><code class=\"language-c#\">void test(){    var book = new pdfBook();    var reader = new EBookReaer(book);}interface EBook{    String read();}class EBookReader{    EBookReader(EBook book);}class PdfBook : EBook{}class MobiBook : EBook{}</code></pre><h4 id=\"resources\">Resources</h4><ul>  <li>https://dotnetfreakblog.wordpress.com/2013/10/07/single-responsibility-principle/</li>  <li>https://www.youtube.com/watch?v=yxf2spbpTSw</li>  <li>https://www.javabrahman.com/programming-principles/liskov-substitution-principal-java-example/</li>  <li>https://code.tutsplus.com/tutorials/solid-part-4-the-dependency-inversion-principle–net-36872</li></ul>",
            "url": "http://localhost:4000/2020/10/20/solid-cheatsheet",
            
            
            
            "tags": ["analisis","diseño","solid","principios"],
            
            "date_published": "2020-10-20T00:00:00-06:00",
            "date_modified": "2020-10-20T00:00:00-06:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/10/10/perspective-2",
            "title": "Perspectiva - Rendimiento y escabilidad",
            "summary": null,
            "content_text": "CualidadesLa habilidad de un sistema en predecir y ejecutar operaciones que se encuentre en el marco establecido y el manejo en el crecimiento de las operaciones.Aplicabilidad  Sistema complejo, requerimientos ambiguos  Arquitecturas con elementos de rendimiento desconocidos.  Expansiones futuras significativas.Preocupaciones  Tiempo de respuestas  Requerimientos de recursos de hardware  Comportamientos de picos de carga  PrediccionesActividades  Capturar requerimientos de rendimiento  Creación y análisis de modelos de rendimiento  Realización de pruebas prácticas  Asistencia en la toma requerimiento y creación de la arquitectura.Estragegias  Optimización de procesos repetitivos  Reducción de variación en la replicación  Priorizar procesamiento  Unificar tareas similiares  Distribución de procesamientos atrevez del tiempo  Minimizar recursos compartidos  Partición y paralelización  Uso de procesos asincronosProblemas  Gran cantidad de objetivos de rendimiento y escabilidad  Modelos no realisticos  Uso de medidas simples para casos complejos  Conflictos en concurrencia  Poco recuros de almacenamiento  No tomar en cuenta la red  Diferencias en invoación de procesos.BibliografíaSOFTWARE SYSTEMS ARCHITECTUREWorking with Stakeholders Using ViewPoints and PerspectivesNick Rozanski, Eoin Woods",
            "content_html": "<h3 id=\"cualidades\">Cualidades</h3><p>La habilidad de un sistema en predecir y ejecutar operaciones que se encuentre en el marco establecido y el manejo en el crecimiento de las operaciones.</p><h3 id=\"aplicabilidad\">Aplicabilidad</h3><ul>  <li>Sistema complejo, requerimientos ambiguos</li>  <li>Arquitecturas con elementos de rendimiento desconocidos.</li>  <li>Expansiones futuras significativas.</li></ul><h3 id=\"preocupaciones\">Preocupaciones</h3><ul>  <li>Tiempo de respuestas</li>  <li>Requerimientos de recursos de hardware</li>  <li>Comportamientos de picos de carga</li>  <li>Predicciones</li></ul><h3 id=\"actividades\">Actividades</h3><ul>  <li>Capturar requerimientos de rendimiento</li>  <li>Creación y análisis de modelos de rendimiento</li>  <li>Realización de pruebas prácticas</li>  <li>Asistencia en la toma requerimiento y creación de la arquitectura.</li></ul><h3 id=\"estragegias\">Estragegias</h3><ul>  <li>Optimización de procesos repetitivos</li>  <li>Reducción de variación en la replicación</li>  <li>Priorizar procesamiento</li>  <li>Unificar tareas similiares</li>  <li>Distribución de procesamientos atrevez del tiempo</li>  <li>Minimizar recursos compartidos</li>  <li>Partición y paralelización</li>  <li>Uso de procesos asincronos</li></ul><h3 id=\"problemas\">Problemas</h3><ul>  <li>Gran cantidad de objetivos de rendimiento y escabilidad</li>  <li>Modelos no realisticos</li>  <li>Uso de medidas simples para casos complejos</li>  <li>Conflictos en concurrencia</li>  <li>Poco recuros de almacenamiento</li>  <li>No tomar en cuenta la red</li>  <li>Diferencias en invoación de procesos.</li></ul><h3 id=\"bibliografía\">Bibliografía</h3><p>SOFTWARE SYSTEMS ARCHITECTUREWorking with Stakeholders Using ViewPoints and PerspectivesNick Rozanski, Eoin Woods</p>",
            "url": "http://localhost:4000/2020/10/10/perspective-2",
            
            
            
            "tags": ["analisis","diseño","perspectivas"],
            
            "date_published": "2020-10-10T00:00:00-06:00",
            "date_modified": "2020-10-10T00:00:00-06:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/09/03/security-perspective",
            "title": "Seguridad - perspectiva de seguridad",
            "summary": null,
            "content_text": "CualidadLa habilidad de controlar, monitoria y auditar las acciones que pueden ser ejercidas sobre los recursos del sistema. La habilidad de recuperar despues de un fallo.AplicaciónTodo sistema que expone interfaces de accesos para multiple usuarios, y en las cuales la identidad del usuario es importante.InteresesPoliticas, amenazas, mecanismos, disponibilidad , detección y recuperación  de errores.ActividadesIntenficaicón de recursos sensibles, definir polizas de seguridad, identificación  de amenazas en el sistema, diseño de la implementación de seguridad, asistir con los riesgos de seguridadArquitecturasAplicación principios de seguridad, principios de auntenticidad, autorización de accessos, asegurar información privada, asegurar disponibilidad, integración de tecnologías de seguridad, proveer seguridad adminitrativa, uso de infrastructura de terceros.",
            "content_html": "<h1 id=\"cualidad\">Cualidad</h1><p>La habilidad de controlar, monitoria y auditar las acciones que pueden ser ejercidas sobre los recursos del sistema. La habilidad de recuperar despues de un fallo.</p><h1 id=\"aplicación\">Aplicación</h1><p>Todo sistema que expone interfaces de accesos para multiple usuarios, y en las cuales la identidad del usuario es importante.</p><h1 id=\"intereses\">Intereses</h1><p>Politicas, amenazas, mecanismos, disponibilidad , detección y recuperación  de errores.</p><h1 id=\"actividades\">Actividades</h1><p>Intenficaicón de recursos sensibles, definir polizas de seguridad, identificación  de amenazas en el sistema, diseño de la implementación de seguridad, asistir con los riesgos de seguridad</p><h1 id=\"arquitecturas\">Arquitecturas</h1><p>Aplicación principios de seguridad, principios de auntenticidad, autorización de accessos, asegurar información privada, asegurar disponibilidad, integración de tecnologías de seguridad, proveer seguridad adminitrativa, uso de infrastructura de terceros.</p>",
            "url": "http://localhost:4000/2020/09/03/security-perspective",
            
            
            
            
            
            "date_published": "2020-09-03T00:00:00-06:00",
            "date_modified": "2020-09-03T00:00:00-06:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/08/05/todo-microsoft",
            "title": "Full microsoft",
            "summary": null,
            "content_text": "Empezando un nuevo proyecto poniendo enfacis en la forma de diseñar, para en nuestro equipo utilizaremos tecnologías microsoft.Al tener las herramientas centralazdas, el siguiemiento sera mas optimo, con esto ganamos horas extras para ser utilizados en el desarrollo de proyecto.Hemos decido que para la comunicación usaremos https://teams.microsoft.com/De entra puedo decir que estoy de cierta manera emocionado para explorar las herramientas que microsoft ofrece para equipos,  en el  desarrollo de proyectos.",
            "content_html": "<p>Empezando un nuevo proyecto poniendo enfacis en la forma de diseñar, para en nuestro equipo utilizaremos tecnologías microsoft.</p><p>Al tener las herramientas centralazdas, el siguiemiento sera mas optimo, con esto ganamos horas extras para ser utilizados en el desarrollo de proyecto.</p><p>Hemos decido que para la comunicación usaremos https://teams.microsoft.com/</p><p>De entra puedo decir que estoy de cierta manera emocionado para explorar las herramientas que microsoft ofrece para equipos,  en el  desarrollo de proyectos.</p>",
            "url": "http://localhost:4000/2020/08/05/todo-microsoft",
            
            
            
            
            
            "date_published": "2020-08-05T00:00:00-06:00",
            "date_modified": "2020-08-05T00:00:00-06:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/07/30/hello-world",
            "title": "Hello world!",
            "summary": null,
            "content_text": "Hello world!",
            "content_html": "<p>Hello world!</p>",
            "url": "http://localhost:4000/2020/07/30/hello-world",
            
            
            
            
            
            "date_published": "2020-07-30T00:00:00-06:00",
            "date_modified": "2020-07-30T00:00:00-06:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}